name: Test Face Detection Application

# Sproži, ko se naredi potisk na main vejo
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Prvi posel - preveri, ali obstajajo testne skripte
  check-tests:
    name: Check for Test Scripts
    runs-on: self-hosted  # Uporabi self-hosted runner
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Check Python installation
      run: |
        # Preveri, katera verzija Python je na voljo
        which python3 || echo "python3 not found"
        which python || echo "python not found"
        python3 --version || echo "Can't get python3 version"
        
    - name: Check if test files exist
      run: |
        python3 .tests/check_tests.py 2> napaka.txt || echo "Test checking failed"
        cat napaka.txt  # Prikaži vsebino napake (če obstaja)
    
    - name: Upload error file as artifact
      uses: actions/upload-artifact@v4
      with:
        name: error-file
        path: napaka.txt
        retention-days: 1

  # Drugi posel - pripravi okolje in zažene teste
  run-tests:
    name: Run Tests
    needs: check-tests  # Odvisnost od prvega posla
    runs-on: self-hosted  # Uporabi self-hosted runner
    
    strategy:
      matrix:
        python-version: [3.12']  # Dodal sem 3.12 kot opcijo
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Download error file artifact
      uses: actions/download-artifact@v4
      with:
        name: error-file
        
    - name: Check error file content
      run: |
        if [ -s napaka.txt ]; then
          echo "Error file contains errors:"
          cat napaka.txt
          exit 1  # Končaj z napako, če obstaja
        else
          echo "No errors found, continuing with tests."
        fi
        
    - name: Setup Python Environment
      run: |
        # Namesti Python, če še ni nameščen
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-venv
        
        # Ustvari virtualno okolje z želeno Python verzijo
        python3 -m venv venv_${{ matrix.python-version }}
        source venv_${{ matrix.python-version }}/bin/activate
        
        # Namesti potrebne pakete
        pip install --upgrade pip
        pip install numpy opencv-python pytest
        
        # Shrani aktivacijsko skripto za kasnejšo uporabo
        echo "source $(pwd)/venv_${{ matrix.python-version }}/bin/activate" > activate_venv.sh
        
    - name: Run tests
      run: |
        # Aktiviraj virtualno okolje
        source activate_venv.sh
        
        # Prikaži verzijo Python-a
        python --version
        
        # Zaženi teste
        python -m pytest -tests/test_main.py -v
        
    - name: Create test result artifact
      run: |
        echo "Tests completed successfully" > test_result.txt
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test_result.txt
        retention-days: 1