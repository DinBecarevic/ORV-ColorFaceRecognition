name: Test Face Detection Application

# Sproži, ko se naredi potisk na main vejo
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Prvi posel - preveri, ali obstajajo testne skripte
  check-tests:
    name: Check for Test Scripts
    runs-on: self-hosted  # Uporabi self-hosted runner
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Check Python installation
      run: |
        # Preveri, katera verzija Python je na voljo
        which python3 || echo "python3 not found"
        python3 --version || echo "Can't get python3 version"
        
    - name: Check if main.py exists
      run: |
        if [ -f "main.py" ]; then
          echo "main.py file found, proceeding with tests"
          echo "All good" > napaka.txt
        else
          echo "NAPAKA: Ne najdem datoteke main.py" > napaka.txt
          cat napaka.txt >&2
          exit 1
        fi
    
    - name: Upload error file as artifact
      uses: actions/upload-artifact@v4
      with:
        name: error-file
        path: napaka.txt
        retention-days: 1

  # Drugi posel - pripravi okolje in zažene teste
  run-tests:
    name: Run Tests
    needs: check-tests  # Odvisnost od prvega posla
    runs-on: self-hosted  # Uporabi self-hosted runner
    
    strategy:
      matrix:
        python-version: ['3.10', '3.12']  # Omejimo na dve verziji za lažje testiranje
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Download error file artifact
      uses: actions/download-artifact@v4
      with:
        name: error-file
        
    - name: Check error file content
      run: |
        if grep -q "NAPAKA" napaka.txt; then
          echo "Error file contains errors:"
          cat napaka.txt
          exit 1  # Končaj z napako, če obstaja
        else
          echo "No errors found, continuing with tests."
        fi
        
    - name: Setup Python Environment
      run: |
        # Namesti potrebne pakete
        sudo apt-get update
        sudo apt-get install -y python3-full python3-pip pipx
        
        # Ustvari virtualno okolje in aktiviraj
        python3 -m venv .venv_${{ matrix.python-version }}
        echo "VENV_PATH=$(pwd)/.venv_${{ matrix.python-version }}" >> $GITHUB_ENV
        
    - name: Install dependencies
      run: |
        # Aktiviraj virtualno okolje in namesti pakete
        source $VENV_PATH/bin/activate
        python -m pip install --upgrade pip
        pip install pytest numpy opencv-python
        
    - name: Create test file
      run: |
        # Ustvari preprosto testno datoteko za testiranje osnovnih funkcionalnosti
        cat > test_basic.py << 'EOL'
        import unittest
        import numpy as np
        import cv2
        import os
        import sys
        import main

        class TestBasicFunctionality(unittest.TestCase):
    
            def test_import(self):
                """Test if all modules can be imported"""
                self.assertTrue(hasattr(main, 'doloci_barvo_koze'))
                self.assertTrue(hasattr(main, 'zmanjsaj_sliko'))
                self.assertTrue(hasattr(main, 'prestej_piksle_z_barvo_koze'))
                self.assertTrue(hasattr(main, 'obdelaj_sliko_s_skatlami'))

            def test_zmanjsaj_sliko(self):
                """Test za funkcijo zmanjševanja slike"""
                test_image = np.zeros((100, 100, 3), dtype=np.uint8)
                target_width, target_height = 50, 30

                resized = main.zmanjsaj_sliko(test_image, target_width, target_height)

                self.assertEqual(resized.shape[1], target_width)
                self.assertEqual(resized.shape[0], target_height)

        if __name__ == "__main__":
            unittest.main()
        
        EOL
        
    - name: Run tests
      run: |
        # Aktiviraj virtualno okolje
        source $VENV_PATH/bin/activate
        
        # Prikaži verzijo Python-a
        python --version
        
        # Zaženi teste
        python -m pytest test_basic.py -v
        
    - name: Create test result artifact
      run: |
        echo "Tests completed successfully" > test_result.txt
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test_result.txt
        retention-days: 1